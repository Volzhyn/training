from dash import Dash, html, dcc, Input, Output, callback
import pandas as pd
import os

# ==================== –°–û–ó–î–ê–ï–ú –î–ê–ù–ù–´–ï ====================
def create_data():
    main_data = {
        'Cohort': ['2024-05', '2024-06', '2024-07'],
        'UA': [9810, 14547, 17094],
        'C1': [2.01, 1.38, 0.87],
        'B': [197, 201, 149],
        'AOV': [10.0, 10.0, 10.0],
        'COGS': [1.3, 1.3, 1.3],
        'T': [328, 268, 149],
        'APC': [1.66, 1.33, 1.00],
        'CLTV': [14.49, 11.60, 8.70],
        'LTV': [0.29, 0.16, 0.08],
        'LTC': [11.55, 8.12, 5.26],
        'AC': [113352, 118106, 89907],
        'CM': [-110498.4, -115774.4, -88610.7],
        'Revenue': [3280, 2680, 1490],
        'Retention_Rate': [51.27, 33.33, 0.00]
    }
    
    repeat_data = {
        'Cohort': ['2024-05', '2024-06', '2024-07'],
        'UA': [9810, 14547, 17094],
        'C1': ['1.03%', '0.46%', '0.0%'],
        'B': [101, 67, 0],
        'AOV': [10.0, 10.0, 0.0],
        'COGS': [1.3, 1.3, 0.0],
        'T': [232, 134, 0],
        'APC': [2.3, 2.0, 0.0],
        'CLTV': [19.98, 17.40, 0.00],
        'LTV': [0.21, 0.08, 0.00],
        'LTC/CPA': [0.12, 0.06, 0.00],
        'AC': [1224, 802, 0],
        'CM': [794.4, 363.8, 0.0],
        'Revenue': [2320, 1340, 0]
    }
    
    return pd.DataFrame(main_data), pd.DataFrame(repeat_data)

main_table, repeat_table = create_data()

# ==================== –§–û–†–ú–£–õ–´ ====================
main_formulas = [
    "UA = COUNTUNIQUE(uuid) - –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
    "B = COUNTUNIQUE(buyer) - –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏",
    "C1 = B / UA √ó 100% - –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π",
    "Retention_Rate = (–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏) / B √ó 100% - –î–æ–ª—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏—Ö—Å—è",
    "T = COUNT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫",
    "Revenue = SUM(aov) - –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞",
    "Total_COGS = SUM(cogs) - –û–±—â–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å",
    "COGS_per_transaction = Total_COGS / T - –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é",
    "AOV = Revenue / T - –°—Ä–µ–¥–Ω–∏–π —á–µ–∫",
    "APC = T / B - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞",
    "AC = SUM(ltc WHERE ltc > 0) - –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ",
    "LTC = AC / UA - –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    "CPA = AC / B - Cost Per Acquisition (–Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è)",
    "CLTV = (AOV - COGS_per_transaction) √ó APC - –í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å —Å –∫–ª–∏–µ–Ω—Ç–∞",
    "LTV = CLTV √ó C1 - –¶–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏",
    "CM = UA √ó (CLTV √ó C1 - LTC) - –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –∫–æ–≥–æ—Ä—Ç—ã",
    "Gross_Margin_% = (Revenue - Total_COGS) / Revenue √ó 100% - –í–∞–ª–æ–≤–∞—è –º–∞—Ä–∂–∞"
]

repeat_formulas = [
    "UA = COUNTUNIQUE(uuid) - –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—Å–µ–π –∫–æ–≥–æ—Ä—Ç—ã",
    "B = COUNTUNIQUE(buyer WHERE payment_count > 1) - –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ —Å 2+ –ø–æ–∫—É–ø–∫–∞–º–∏",
    "C1 = B / UA √ó 100% - –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π",
    "T = COUNT(aov > 0 WHERE buyer IN repeat_buyers) - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö",
    "Revenue = SUM(aov WHERE buyer IN repeat_buyers) - –í—ã—Ä—É—á–∫–∞ –æ—Ç —Å–µ–≥–º–µ–Ω—Ç–∞ 2+",
    "Total_COGS = SUM(cogs WHERE buyer IN repeat_buyers) - –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞ 2+",
    "COGS_per_transaction = Total_COGS / T - –°—Ä–µ–¥–Ω—è—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
    "AOV = Revenue / T - –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ —Å–µ–≥–º–µ–Ω—Ç–∞ 2+",
    "APC = T / B - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ 2+",
    "AC_repeat = SUM(ltc WHERE buyer IN repeat_buyers AND ltc > 0) - –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç 2+",
    "LTC/CPA = AC_repeat / UA - –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç 2+ –≤ —Ä–∞—Å—á—ë—Ç–µ –Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–≥–æ—Ä—Ç—ã",
    "CLTV = (AOV - COGS_per_transaction) √ó APC - –¶–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞",
    "LTV = CLTV √ó C1 - –¶–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ 2+",
    "CM = Revenue - Total_COGS - AC_repeat - –ü—Ä–∏–±—ã–ª—å –æ—Ç —Å–µ–≥–º–µ–Ω—Ç–∞ 2+"
]

# ==================== DASH –ü–†–ò–õ–û–ñ–ï–ù–ò–ï ====================
app = Dash(__name__)
server = app.server   # üîë Render –ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç Flask —Å–µ—Ä–≤–µ—Ä

app.layout = html.Div([
    html.H1("üìä –ê–Ω–∞–ª–∏–∑ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏ –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º", 
            style={'textAlign': 'center', 'color': '#2c3e50', 'marginBottom': '20px'}),
    
    html.Div([
        dcc.RadioItems(
            id='table-selector',
            options=[
                {'label': 'üìã –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞', 'value': 'main'},
                {'label': 'üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏', 'value': 'repeat'}
            ],
            value='main',
            labelStyle={'display': 'inline-block', 'margin': '10px'}
        )
    ], style={'textAlign': 'center', 'margin': '20px'}),
    
    html.Div(id='table-container'),
    
    html.H2("üìò –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏", style={'marginTop': '40px'}),
    html.Ul([html.Li(f) for f in main_formulas], style={'marginBottom': '40px'}),
    
    html.H2("üìò –§–æ—Ä–º—É–ª—ã –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π —Å 1+ –ø–æ–∫—É–ø–∫–∞–º–∏"),
    html.Ul([html.Li(f) for f in repeat_formulas])
])

@callback(
    Output('table-container', 'children'),
    Input('table-selector', 'value')
)
def update_table(selected_table):
    if selected_table == 'main':
        current_table = main_table
        title = "–Æ–ù–ò–¢-–≠–ö–û–ù–û–ú–ò–ö–ê –î–õ–Ø –ö–õ–ò–ï–ù–¢–û–í –ü–û –ö–û–ì–û–†–¢–ê–ú –ü–†–ò–í–õ–ï–ß–ï–ù–ò–Ø"
    else:
        current_table = repeat_table
        title = "–Æ–ù–ò–¢-–≠–ö–û–ù–û–ú–ò–ö–ê –î–õ–Ø –°–ï–ì–ú–ï–ù–¢–ê –ü–û–ö–£–ü–ê–¢–ï–õ–ï–ô –° >1 –ü–û–ö–£–ü–ö–ê–ú–ò"
    
    # –°—Ç–∏–ª–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    table_style = {
        'width': '100%',
        'borderCollapse': 'collapse',
        'margin': '20px auto'
    }
    cell_style = {
        'border': '1px solid black',
        'padding': '6px',
        'textAlign': 'center'
    }
    
    table = html.Table([
        html.Thead(
            html.Tr([html.Th(col, style=cell_style) for col in current_table.columns])
        ),
        html.Tbody([
            html.Tr([html.Td(current_table.iloc[i][col], style=cell_style) for col in current_table.columns])
            for i in range(len(current_table))
        ])
    ], style=table_style)
    
    return html.Div([
        html.H3(title, style={'textAlign': 'center', 'marginTop': '20px'}),
        table
    ])

# ==================== –ó–ê–ü–£–°–ö ====================
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8050))  # Render –ø–µ—Ä–µ–¥–∞—Å—Ç –ø–æ—Ä—Ç
    app.run(host="0.0.0.0", port=port, debug=False)
